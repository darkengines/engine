////////////////////////////////////////////////////
// File name: Texture.h
////////////////////////////////////////////////////

#ifndef _TEXTURE_H_
#define _TEXTURE_H_

////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////

#include <stdlib.h>
#include <stdio.h>
#include <fstream>
#include <iostream>
#include <gl\glew.h>
#include <SDL\SDL_image.h>
#include <list>

////////////////////////////////////////////////////
// Namespaces
////////////////////////////////////////////////////

using namespace std;
class Texture;

////////////////////////////////////////////////////
// Typesdefs
////////////////////////////////////////////////////

typedef struct {
	char* path;
	Texture* texture;
} LoadedTexture;

////////////////////////////////////////////////////
// Class name: Texture
////////////////////////////////////////////////////

class Texture {
private:
	static list<LoadedTexture*> loaded;
public:
	Texture();
	int Initialize(const char*, bool);
	GLuint textureID;

private:
	int loadImage(const char*);
	LoadedTexture* isTextureLoaded(const char*);
	int registerTexture(const char*, Texture*);
};

#endif